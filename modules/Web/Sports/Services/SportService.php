<?php

namespace BasicDashboard\Web\Sports\Services;

use BasicDashboard\Foundations\Domain\Sports\Repositories\SportRepositoryInterface;
use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\Sports\Resources\SportResource;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;
use Exception;

/**
 *
 * A SportService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class SportService extends BaseController
{
    const VIEW = 'admin.sport';
    const ROUTE = 'sports';
    const LANG_PATH = "sport.sport";

    public function __construct(
        private SportRepositoryInterface $sportRepositoryInterface,
    )
    {
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $sportList = $this->sportRepositoryInterface->getSportList($request);
        $sportList = SportResource::collection($sportList)->response()->getData(true);
        return $this->returnView(self::VIEW.".index", $sportList, $request);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return view(self::VIEW.'.create');
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request): RedirectResponse
    {
        try {
            $this->sportRepositoryInterface->beginTransaction();
            $thumbnailPath        = isset($request['image']) ? uploadImageToDigitalOcean($request['image'], 'sports') : null;
            $request['image'] = $thumbnailPath;
            $this->sportRepositoryInterface->insert($request);
            $this->sportRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_created'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->sportRepositoryInterface, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $sport = $this->sportRepositoryInterface->edit($id);
        $sport = new SportResource($sport);
        $sport = $sport->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . ".edit", $sport);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $sport = $this->sportRepositoryInterface->show($id);
        $sport = new SportResource($sport);
        $sport = $sport->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $sport);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id): RedirectResponse
    {
         try {
            $this->sportRepositoryInterface->beginTransaction();
            $sport = $this->sportRepositoryInterface->show($id);
            $thumbnailPath        = isset($request['image']) ? uploadImageToDigitalOcean($request['image'], 'sports') : $sport->image;
            $request['image'] = $thumbnailPath;
            $this->sportRepositoryInterface->update($request, $id);
            $this->sportRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->sportRepositoryInterface, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy($request): RedirectResponse
    {
         try {
            $this->sportRepositoryInterface->beginTransaction();
            $this->sportRepositoryInterface->delete($request['id']);
            $this->sportRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->sportRepositoryInterface, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////
}
