<?php

namespace BasicDashboard\Web\Categories\Services;

use BasicDashboard\Foundations\Domain\Categories\Repositories\CategoryRepositoryInterface;
use Exception;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\Categories\Resources\CategoryResource;

/**
 *
 * A CategoryService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class CategoryService extends BaseController
{
    const VIEW = 'admin.category';
    const ROUTE = 'categories';
    const LANG_PATH = "category.category";

    public function __construct(
        private CategoryRepositoryInterface $categoryRepository,
    )
    {
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $categoryList = $this->categoryRepository->getCategoryList($request);
        $categoryList = CategoryResource::collection($categoryList)->response()->getData(true);
        return $this->returnView(self::VIEW.".index", $categoryList, $request);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return view(self::VIEW.'.create');
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request): RedirectResponse
    {
        try {
            $this->categoryRepository->beginTransaction();
            $this->categoryRepository->insert($request);
            $this->categoryRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_created'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->categoryRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $category = $this->categoryRepository->edit($id);
        $category = new CategoryResource($category);
        $category = $category->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . ".edit", $category);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $category = $this->categoryRepository->show($id);
        $category = new CategoryResource($category);
        $category = $category->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $category);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id): RedirectResponse
    {
         try {
            $this->categoryRepository->beginTransaction();
            $this->categoryRepository->update($request, $id);
            $this->categoryRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->categoryRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy($request): RedirectResponse
    {
         try {
            $this->categoryRepository->beginTransaction();
            $this->categoryRepository->delete($request['id']);
            $this->categoryRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->categoryRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////
}