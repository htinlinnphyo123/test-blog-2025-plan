<?php

namespace BasicDashboard\Web\SponsorAds\Controllers;

use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\SponsorAds\Services\SponsorAdService;
use BasicDashboard\Web\SponsorAds\Validation\StoreSponsorAdRequest;
use BasicDashboard\Web\SponsorAds\Validation\UpdateSponsorAdRequest;
use BasicDashboard\Web\SponsorAds\Validation\DeleteSponsorAdRequest;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;

/**
 *
 * A SponsorAdController is responsible for receive request and return response.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class SponsorAdController extends BaseController
{
    public function __construct(
        private SponsorAdService $sponsorAdService
    ) {}

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(Request $request): View
    {
        return $this->sponsorAdService->index($request->all());
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return $this->sponsorAdService->create();
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store(StoreSponsorAdRequest $request): RedirectResponse
    {
        return $this->sponsorAdService->store($request->all());
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        return $this->sponsorAdService->edit($id);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        return $this->sponsorAdService->show($id);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update(UpdateSponsorAdRequest $request, string $id): RedirectResponse
    {
        return $this->sponsorAdService->update($request->all(), $id);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy(DeleteSponsorAdRequest $request): RedirectResponse
    {
        return $this->sponsorAdService->destroy($request->validated());
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function sendSponsorAdNotification(Request $request,string $id)
    {
        return $this->sponsorAdService->sendSponsorAdNotification($request,$id);
    }
}
