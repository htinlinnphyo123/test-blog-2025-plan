<?php

namespace BasicDashboard\Web\SponsorAds\Services;

use Exception;
use Illuminate\View\View;
use Ladumor\OneSignal\OneSignal;
use Illuminate\Http\RedirectResponse;
use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Foundations\Domain\SponsorAds\SponsorAd;
use BasicDashboard\Web\SponsorAds\Resources\SponsorAdResource;
use BasicDashboard\Foundations\Domain\SponsorAds\Repositories\SponsorAdRepositoryInterface;

/**
 *
 * A SponsorAdService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class SponsorAdService extends BaseController
{
    const VIEW = 'admin.sponsorAds';
    const ROUTE = 'sponsorAds';
    const LANG_PATH = "sponsorAd.sponsorAd";

    public function __construct(
        private SponsorAdRepositoryInterface $sponsorAdRepository,
    ) {}

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $sponsorAdList = $this->sponsorAdRepository->getSponsorAdList($request);
        $sponsorAdList = SponsorAdResource::collection($sponsorAdList)->response()->getData(true);
        // dd($sponsorAdList);
        return $this->returnView(self::VIEW . ".index", $sponsorAdList, $request);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        $presignedLink = $this->generatePresignedUrl(1, 'sponsorAds/video');
        return view(self::VIEW . '.create', compact('presignedLink'));
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request): RedirectResponse
    {
        
        try {
            $this->sponsorAdRepository->beginTransaction();
            $model = $this->sponsorAdRepository->insert($request);
            $path = "sponsorAds" . '/' . $model['id'];
            $UploadImagePath = isset($request['thumbnail_image']) ? uploadImageToDigitalOcean($request['thumbnail_image'], $path) : null;
            $model->update([
                'thumbnail_image' => $UploadImagePath
            ]);
            $this->sponsorAdRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_created'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->sponsorAdRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $presignedLink = $this->generatePresignedUrl(1, 'sponsorAds/video');

        $sponsorAd = $this->sponsorAdRepository->edit($id);
        $sponsorAd = new SponsorAdResource($sponsorAd);
        $sponsorAd = $sponsorAd->response()->getData(true)['data'];
        $data = [
            'sponsorAd' => $sponsorAd,
            'presignedLinked' => $presignedLink
        ];
        return $this->returnView(self::VIEW . ".edit", $data);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $sponsorAd = $this->sponsorAdRepository->show($id);
        $sponsorAd = new SponsorAdResource($sponsorAd);
        $sponsorAd = $sponsorAd->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $sponsorAd);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id): RedirectResponse
    {
        try {
            $this->sponsorAdRepository->beginTransaction();
            $this->sponsorAdRepository->update($request, $id);
            $model = $this->sponsorAdRepository->show($id);
            $path = "sponsorAds" . '/' . $model['id'];

            $notiUploadImagePath = isset($request['thumbnail_image']) ? uploadImageToDigitalOcean($request['thumbnail_image'], $path) : $model['thumbnail_image'];

            $model->update([
                'thumbnail_image' => $notiUploadImagePath,
            ]);
            $this->sponsorAdRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->sponsorAdRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy($request): RedirectResponse
    {
        try {
            $this->sponsorAdRepository->beginTransaction();
            $this->sponsorAdRepository->delete($request['id']);
            $this->sponsorAdRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->sponsorAdRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function sendSponsorAdNotification($request, $id)
    {
        $request->validate([
            'country' => "required",
        ], [
            'country.requird' => "Please select country",
        ]);
        $country = $request->input('country');
        $sponsorAd = $this->sponsorAdRepository->show($id);
        $sponsorAd = new SponsorAdResource($sponsorAd);
        $sponsorAd = $sponsorAd->response()->getData(true)['data'];

        $imageURL = $sponsorAd['thumbnail_image'];
        // $videoURL = $sponsorAd['uploaded_video'];

        $fields = [
            'included_segments' => [$country],
            'chrome_web_image' => $imageURL, //Chrome web push. Windows and Android only.
            'chrome_web_icon' => $imageURL, //Chrome web push
            'chrome_big_picture' => $imageURL, //Chrome Apps
            'chrome_web_badge' => $imageURL, //Chrome web push. Android only.
            'chrome_icon' => $imageURL, //Chrome app
            'firefox_icon' => $imageURL, //Firefox web push            
            'huawei_big_picture' => $imageURL, //Huawei
            'huawei_small_icon' => $imageURL, //Huawei
            'huawei_large_icon' => $imageURL, //Huawei
            'adm_big_picture' => $imageURL, //Amazon
            'adm_small_icon' => $imageURL, //Amazon
            'adm_large_icon' => $imageURL, //Huawei 
            'big_picture' => $imageURL, //Android           
            'small_icon' => $imageURL, //Android            
            'large_icon' => $imageURL, //Android 
            // 'url' => $videoURL,
            'data' => [
                'sponsorad_id' => $sponsorAd['id'],
                'sponsorad_link' => $sponsorAd['link'],
                'sponsorad_photo_link' => $sponsorAd['thumbnail_image'],
                'sponsorad_platform' => $sponsorAd['platform'],
            ]
        ];
        defer(function () use ($fields, $sponsorAd) {
            OneSignal::sendPush($fields, "**" . $sponsorAd['name'] . "**" . "\n" . $sponsorAd['description'] . "**" . "\n" . $sponsorAd['link']);
        });
        return $this->sendAjaxSuccess("SponsorAd was successfully Send!");
    }
}
