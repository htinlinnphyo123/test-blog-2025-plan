<?php
namespace BasicDashboard\Web\Articles\Services;

use BasicDashboard\Foundations\Domain\Articles\Repositories\ArticleRepositoryInterface;
use BasicDashboard\Foundations\Domain\Categories\Repositories\CategoryRepositoryInterface;
use BasicDashboard\Web\Articles\Jobs\StoreArticleJob;
use BasicDashboard\Web\Articles\Jobs\UpdateArticleJob;
use BasicDashboard\Web\Articles\Resources\ArticleResource;
use BasicDashboard\Web\Articles\Resources\EditArticleResource;
use BasicDashboard\Web\Articles\Traits\SendTelegramNotification;
use BasicDashboard\Web\Common\BaseController;
use Exception;
use function Illuminate\Support\defer;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Notification;
use Illuminate\View\View;
use Ladumor\OneSignal\OneSignal;

/**
 *
 * A ArticleService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class ArticleService extends BaseController
{
    use SendTelegramNotification;
    const VIEW      = 'admin.article';
    const ROUTE     = 'articles';
    const LANG_PATH = "article.article";

    public function __construct(
        private ArticleRepositoryInterface $articleRepository,
        private CategoryRepositoryInterface $categoryRepository,
        private Notification $notification,
        private StoreArticleJob $storeArticleJob
    ) {}

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $articleList = $this->articleRepository->getArticleList($request);
        $articleList = ArticleResource::collection($articleList)->response()->getData(true);
        return $this->returnView(self::VIEW . ".index", $articleList);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return view(self::VIEW . '.create');
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request)
    {
        try {
            $this->articleRepository->beginTransaction();
            $link_count           = $this->storeArticleJob->getLinks($request);
            $telegramNotification = $this->storeArticleJob->checkTelegramNotification($request);
            $request              = Arr::except($request, ['is_sent_to_telegram', 'link_count']);
            $model                = $this->articleRepository->insert($request);
            $path                 = "articles" . '/' . $model['id'];
            $generatedUrl         = $this->generatePresignedUrl($link_count, $path);
            $paths                = array_column($generatedUrl, 'path'); // to store in db
            $urls                 = array_column($generatedUrl, 'url');  //to return to frontend
            $thumbnailPath        = isset($request['thumbnail']) ? uploadImageToDigitalOcean($request['thumbnail'], $path) : null;
            $this->storeArticleJob->modelUpdater($model, $paths, $thumbnailPath);
            $telegramNotification ? $this->sendTelegramNotification(customEncoder($model->id)) : '';
            $this->articleRepository->commit();
            return response()->json($this->storeArticleJob->prepareReturnData(self::LANG_PATH, $urls, $model['id']));
        } catch (Exception $e) {
            return $this->sendAjaxError($e->getMessage());
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $article = $this->articleRepository->edit($id);
        $article = new EditArticleResource($article);
        $article = $article->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . ".edit", $article);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $article = $this->articleRepository->show($id);
        $article = new ArticleResource($article);
        $article = $article->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $article);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id, UpdateArticleJob $updateJob): JsonResponse
    {
        try {
            //get link count to generate presigned url
            $linkCount         = $request['link_count'];
            $deletedMediaArray = json_decode($request['deleteArray']);
            unset($request['link_count']);
            unset($request['deleteArray']);

            $model = $this->articleRepository->show($id);

            if ($request['type'] !== $model->type) {
                $model->link = $updateJob->typeChangedAndAllLinkDeleted($model->link);
            } else if (count($deletedMediaArray) > 0) {
                //If some links are deleted by user, then remove from db and digitalocean
                $model->link = $updateJob->typeNotChangeAndSomeLinkDeleted($model->link, $deletedMediaArray);
            }

            $this->articleRepository->beginTransaction();
            $this->articleRepository->update($request, $id);
            //for new model
            $path = "articles" . '/' . $model->id;

            $generateLink = $updateJob->newLinksAddAndGeneratePresignedUrlAndPath($linkCount, $path, $model->link);

            $thumbnailPath = $updateJob->updateThumbnail($request, $model->thumbnail, $path);

            $model->update([
                'link'      => $generateLink['dbPath'],
                'thumbnail' => $thumbnailPath,
            ]);

            $this->articleRepository->commit();

            return response()->json([
                'message'      => __(self::LANG_PATH . '_created'),
                'responseType' => 'success',
                'status'       => 200,
                'data'         => $generateLink['frontendUrl'],
                'id'           => customEncoder($model['id']),
            ]);
        } catch (Exception $e) {
            return $this->sendAjaxError($e->getMessage());
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy(array $request): RedirectResponse
    {
        try {
            $this->articleRepository->beginTransaction();
            $this->articleRepository->delete($request['id']);
            $this->articleRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->articleRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    /**
     * Send One Signal Notification
     * @param mixed $request
     * @param mixed $id
     * @return JsonResponse|mixed
     */
    public function sendArticleNotification($request, $id)
    {
        $request->validate([
            'country' => 'required',
        ], [
            'country.required' => "Please Select Country",
        ]);
        $country = $request->input('country');
        $article = $this->articleRepository->show($id);
        $article = new ArticleResource($article);
        $article = $article->response()->getData(true)['data'];

        $imageUrl = $article['thumbnail'];

        $fields = [
            'included_segments'  => [$country],
            'chrome_web_image'   => $imageUrl, //Chrome web push. Windows and Android only.
            'chrome_web_icon'    => $imageUrl, //Chrome web push
            'chrome_big_picture' => $imageUrl, //Chrome Apps
            'chrome_web_badge'   => $imageUrl, //Chrome web push. Android only.
            'chrome_icon'        => $imageUrl, //Chrome app
            'firefox_icon'       => $imageUrl, //Firefox web push
            'huawei_big_picture' => $imageUrl, //Huawei
            'huawei_small_icon'  => $imageUrl, //Huawei
            'huawei_large_icon'  => $imageUrl, //Huawei
            'adm_big_picture'    => $imageUrl, //Amazon
            'adm_small_icon'     => $imageUrl, //Amazon
            'adm_large_icon'     => $imageUrl, //Huawei
            'big_picture'        => $imageUrl, //Android
            'small_icon'         => $imageUrl, //Android
            'large_icon'         => $imageUrl, //Android
            'data'               => [
                'article_id' => $article['id'],
            ],
        ];
        // defer(function () use ($fields, $article) {
            $test = OneSignal::sendPush($fields, "**" . $article['title']);
            \Log::info($test);
        // });
        return $this->sendAjaxSuccess("Article was successfully Send!");
    }

    //This private function will be run with defer
    public function sendTelegramNotification($articleId): RedirectResponse
    {
        $this->sendTelegramNotificationTrait($articleId);

        return to_route("articles.show", $articleId)->with([
            'message'      => 'Article was successfully Send to Telegram!',
            'responseType' => 'success',
        ]);
    }

}
