<?php

namespace BasicDashboard\Web\Roles\Services;

use Exception;
use Carbon\Carbon;
use Illuminate\View\View;
use Spatie\Permission\Models\Role;
use Illuminate\Support\Facades\Auth;
use Illuminate\Http\RedirectResponse;
use Spatie\Permission\Models\Permission;
use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\Roles\Resources\RoleResource;
use BasicDashboard\Foundations\Domain\Roles\Repositories\Eloquent\RoleRepository;
use BasicDashboard\Foundations\Domain\Roles\Repositories\RoleRepositoryInterface;

/**
 *
 * A RoleService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class RoleService extends BaseController
{
    const VIEW = 'admin.role';
    const ROUTE = 'roles';
    const LANG_PATH = "role.role";

    public function __construct(
        private RoleRepositoryInterface $roleRepository,
    )
    {
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $roleList = $this->roleRepository->getRoleList($request);
        $roleList = RoleResource::collection($roleList)->response()->getData(true);
        return $this->returnView(self::VIEW.".index", $roleList, $request);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        $getAllPermissions = $this->getFormattedPermissions();
        return view(self::VIEW.'.create',compact('getAllPermissions'));
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request): RedirectResponse
    {
        try {
            $this->roleRepository->beginTransaction();
            $role = $this->roleRepository->insert([
                'name' => $request['name'],
                'guard_name' => 'web'
            ]);
            $role->givePermissionTo($request['permissions']);
            $this->roleRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_created'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->roleRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $role = $this->roleRepository->edit($id);
        $getAllPermissions = $this->getFormattedPermissions(); //get all permissions
        $getCurrentPermissions = $role->getAllPermissions()->pluck('name')->toArray(); //get permission of this role
        $role = new RoleResource($role);
        $role = $role->response()->getData(true)['data'];
        return view(self::VIEW . ".edit", compact(
                'role', 
                'getAllPermissions',
                'getCurrentPermissions'
            ) );
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $role = $this->roleRepository->show($id);
        $role = new RoleResource($role);
        $role = $role->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $role);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id): RedirectResponse
    {
         try {
            $this->roleRepository->beginTransaction();
            $role = $this->roleRepository->update($request, $id);
            $id = customDecoder($id); //get Decrypt Id
            $role = Role::find($id); //get Roles
            $role->syncPermissions($request['permissions']); // this will detach and attach permissions to this role
            $this->roleRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->roleRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy($request): RedirectResponse
    {
         try {
            $this->roleRepository->beginTransaction();
            $id = $request['id'];
            $id = customDecoder($id); // we will need to convert to real ID from encodeId 
            $this->roleRepository->connection(true)
                ->where('id',$id)
                ->update([
                    'deleted_at' => Carbon::now(),
                    'deleted_by' => Auth::id()
                ]);
            $this->roleRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->roleRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    /**
     * Generates a multidimensional array of permissions grouped by feature. ["users"=>array of user permission lists,"countries"=> .... ]
     * 1. get All the features and Permission Lists from database
     * 2. we will loop features and check with each feature name Eg.users 
     * 3. we will add feature_key(users) to $finalPermission -> $finalPermissions['users'] on the left side
     * 4. on the right side - we will filter all permissions that include feature key('users') Eg-['manage users','create users',...]
     */
    private function getFormattedPermissions() : array
    {
        $features = config('numbers.permissions'); //['users','countries','audits','roles']
        $permissions = Permission::orderBy('id','asc')->get(['id','name'])->toArray(); //['manage users',...] All permissions
        $finalPermissions = [];
        foreach ($features as $feature) {
            $finalPermissions[$feature] = array_filter($permissions, function($permission) use ($feature) {
                return str_contains($permission['name'], ' ' . $feature); //str_contains('manage users','users')
            });
        }
        return $finalPermissions;
    }

}