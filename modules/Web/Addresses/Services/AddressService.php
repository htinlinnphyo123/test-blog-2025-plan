<?php

namespace BasicDashboard\Web\Addresses\Services;

use Exception;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\Addresses\Resources\AddressResource;
use BasicDashboard\Web\Addresses\Resources\AddressEditResource;
use BasicDashboard\Foundations\Domain\Addresses\Repositories\AddressRepositoryInterface;

/**
 *
 * A AddressService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class AddressService extends BaseController
{
    const VIEW = 'admin.address';
    const ROUTE = 'addresses';
    const LANG_PATH = "address.address";

    public function __construct(
        private AddressRepositoryInterface $addressRepository,
    )
    {
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $addressList = $this->addressRepository->getAddressList($request);
        $addressList = AddressResource::collection($addressList)->response()->getData(true);
        return $this->returnView(self::VIEW.".index", $addressList, $request);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return view(self::VIEW.'.create');
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request): RedirectResponse
    {
        try {
            $this->addressRepository->beginTransaction();
            $this->addressRepository->insert($request);
            $this->addressRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_created'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->addressRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $address = $this->addressRepository->edit($id);
        $address = new AddressEditResource($address);
        $address = $address->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . ".edit", $address);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $address = $this->addressRepository->show($id);
        $address = new AddressResource($address);
        $address = $address->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $address);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id): RedirectResponse
    {
         try {
            $this->addressRepository->beginTransaction();
            $this->addressRepository->update($request, $id);
            $this->addressRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->addressRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy($request): RedirectResponse
    {
         try {
            $this->addressRepository->beginTransaction();
            $this->addressRepository->delete($request['id']);
            $this->addressRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->addressRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////
}
