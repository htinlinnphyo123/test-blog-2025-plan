<?php

namespace BasicDashboard\Foundations\Domain\Addresses\Repositories\Eloquent;

use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Contracts\Database\Eloquent\Builder;
use BasicDashboard\Foundations\Domain\Addresses\Address;
use BasicDashboard\Foundations\Domain\Base\Repositories\Eloquent\BaseRepository;
use BasicDashboard\Foundations\Domain\Addresses\Repositories\AddressRepositoryInterface;

/**
 *
 * A AddressRepository is includes extra function for implementing.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class AddressRepository extends BaseRepository implements AddressRepositoryInterface
{
    public function __construct(Address $model)
    {
        parent::__construct($model);
    }

    protected function filterAddress(array $params): Builder | Address
    {
        $connection = $this->connection()->with('country');
        if (isset($params['keyword']) && strlen($params['keyword']) > 0) {
            $connection = $connection->where('level1_code', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level1_name', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level2_code', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level2_name', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level3_code', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level3_name', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level4_code', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level4_name', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level5_code', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level5_name', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level6_code', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level6_name', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level7_code', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('level7_name', 'LIKE', '%' . $params['keyword'] . '%');
        }
        return $connection;
    }

    public function getAddressList($params): LengthAwarePaginator
    {
        return $this->filterAddress($params)
            ->orderByRaw('CASE WHEN created_at IS NULL THEN updated_at ELSE created_at END DESC')
            ->orderBy('id', 'desc')
            ->paginate(request()->paginate ?? config('numbers.paginate'));
    }
}
