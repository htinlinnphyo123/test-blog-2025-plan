<?php

namespace BasicDashboard\Foundations\Domain\Currencies\Repositories\Eloquent;

use BasicDashboard\Foundations\Domain\Base\Repositories\Eloquent\BaseRepository;
use BasicDashboard\Foundations\Domain\Currencies\Currency;
use BasicDashboard\Foundations\Domain\Currencies\Repositories\CurrencyRepositoryInterface;
use Illuminate\Contracts\Database\Eloquent\Builder;
use Illuminate\Pagination\LengthAwarePaginator;

/**
 *
 * A CurrencyRepository is includes extra function for implementing.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class CurrencyRepository extends BaseRepository implements CurrencyRepositoryInterface
{
    public function __construct(Currency $model)
    {
        parent::__construct($model);
    }

    public function filterCurrency($params): Builder | Currency
    {
        $connection = $this->connection();

        if (isset($params['keyword'])) {
            $connection = $connection->where('rate', 'LIKE', '%' . $params['keyword'] . '%');
        }
        return $connection;
    }
    public function getCurrencyList($params, $countryId=null): LengthAwarePaginator
    {
        $filterCurrency = $this->filterCurrency($params);
        if($countryId){
            $filterCurrency = $filterCurrency->where('currencies.country_id', '=', $countryId);
        } 
        return $filterCurrency
            ->orderByRaw('CASE WHEN created_at IS NULL THEN updated_at ELSE created_at END DESC')
            ->orderBy('id', 'desc')
            ->paginate(request()->paginate ?? config('numbers.paginate'));
    }
}
