<?php

namespace BasicDashboard\Foundations\Domain\Settings\Repositories\Eloquent;

use Illuminate\Support\Collection;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Contracts\Database\Eloquent\Builder;
use BasicDashboard\Foundations\Domain\Settings\Setting;
use BasicDashboard\Foundations\Domain\Base\Repositories\Eloquent\BaseRepository;
use BasicDashboard\Foundations\Domain\Settings\Repositories\SettingRepositoryInterface;
use Illuminate\Database\Eloquent\Collection as EloquentCollection;

/**
 *
 * A SettingRepository is includes extra function for implementing.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class SettingRepository extends BaseRepository implements SettingRepositoryInterface
{
    public function __construct(Setting $model)
    {
        parent::__construct($model);
    }

    protected function filterSetting(array $params): Builder | Setting
    {
        $connection = $this->connection();
        if (isset($params['keyword']) && strlen($params['keyword']) > 0) {
            $connection = $connection->where('key', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('value', 'LIKE' , '%' . $params['keyword']. '%');
        }
        return $connection;
    }

    public function getSettingList($params): LengthAwarePaginator
    {
        return $this->filterSetting($params)
            ->orderByRaw('CASE WHEN created_at IS NULL THEN updated_at ELSE created_at END DESC')
            ->orderBy('id', 'desc')
            ->paginate(request()->paginate ?? config('numbers.paginate'));
    }

    public function getAppVersions() : Collection
    {
        return $this->connection()
            ->whereIn('key',[
                'androidVersion',
                'newAndroidVersion',
                'IOSVersion',
                'newIOSVersion'
            ])
            ->pluck('value','key');
    }

    public function getSocialAcc() : EloquentCollection
    {
        return $this->connection()
            ->whereIn('key',[
                'Facebook',
                'Youtube',
                'Tiktok',
                'Telegram'
            ])
            ->select(['key','value'])
            ->get();
    }

}
