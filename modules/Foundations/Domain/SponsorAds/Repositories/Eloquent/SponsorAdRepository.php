<?php

namespace BasicDashboard\Foundations\Domain\SponsorAds\Repositories\Eloquent;

use BasicDashboard\Foundations\Domain\Base\Repositories\Eloquent\BaseRepository;
use BasicDashboard\Foundations\Domain\SponsorAds\Repositories\SponsorAdRepositoryInterface;
use BasicDashboard\Foundations\Domain\SponsorAds\SponsorAd;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Pagination\LengthAwarePaginator;

/**
 *
 * A SponsorAdRepository is includes extra function for implementing.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class SponsorAdRepository extends BaseRepository implements SponsorAdRepositoryInterface
{
    public function __construct(SponsorAd $model)
    {
        parent::__construct($model);
    }

    public function filterSponsorAd(array $params): Builder | SponsorAd
    {
        $connection = $this->connection();
        if (isset($params['keyword']) && strlen($params['keyword']) > 0) {
            $connection = $connection->where('name', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('start_date', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('end_date', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('description', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('position', 'LIKE', '%' . $params['keyword'] . '%')
                ->orWhere('size', 'LIKE', '%' . $params['keyword'] . '%');
        }
        return $connection;
    }

    public function getSponsorAdList($params): LengthAwarePaginator
    {
        return $this->filterSponsorAd($params)
            ->orderByRaw('CASE WHEN created_at IS NULL THEN updated_at ELSE created_at END DESC')
            ->orderBy('id', 'desc')
            ->paginate(request()->paginate ?? config('numbers.paginate'));
    }

    public function getSponsorAds(string $position = null): Collection
    {
        $today = Carbon::now()->format('Y-m-d');
        return $this->connection(true)
            ->where('position', $position)
            ->where('platform', 'Web')
            ->where('start_date', '<=', $today)
            ->where('end_date', '>=', $today)
            ->get();
    }

    public function getSponsorAdsBySize(string $size): Collection
    {
        $today = Carbon::now()->format('Y-m-d');
        return $this->connection(true)
            ->where('size', $size)
            ->where('platform', 'Web')
            ->where('start_date', '<=', $today)
            ->where('end_date', '>=', $today)
            ->get();
    }

    public function getRandomSponsorAdsSpa(string $position=null) : array
    {
        $today = Carbon::now()->format('Y-m-d');
        $sponsorAd = $this->connection(true)
            ->where('position', $position)
            ->where('platform', 'Web')
            ->where('start_date', '<=', $today)
            ->where('end_date', '>=', $today)
            ->whereNotNull('thumbnail_image')
            ->orderByRaw('RAND()')
            ->take(1)
            ->select('thumbnail_image', 'link')
            ->first();
        if($sponsorAd){
            $sponsorAd->thumbnail_image = retrievePublicFile($sponsorAd->thumbnail_image);
            $sponsorAd = $sponsorAd->toArray();
        }else{
            return [];
        }
        return $sponsorAd;
    }

}